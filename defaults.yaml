qabel:
    index:
        # SECURITY WARNING: don't run with debug turned on in production!
        DEBUG: False
        ALLOWED_HOSTS:
          - '*'

        # All REST operations on the index server can be made to require authorization.
        # The old behaviour is to not require it.
        REQUIRE_AUTHORIZATION: False
        # If REQUIRE_AUTHORIZATION is set, then the APISECRET and URL must also be set.
        # ACCOUNTING_APISECRET: '1234'
        # ACCOUNTING_URL: 'https://accs04.shard5.hypercloud.in.4d.example.net/'

        # SECURITY WARNING: keep the secret key used in production secret!
        SECRET_KEY: '=tmcici-p92_^_jih9ud11#+wb7*i21firlrtcqh$p+d7o*49@'

        # This is the key the server uses to receive authenticated
        # requests. By default it's set to a random key at each
        # startup, however, in a multi-process environment you want to
        # set this to a fixed value (64 hex characters or 32 bytes).

        # You can generate one with
        # $ python -c 'import os; print(repr(os.urandom(32).hex()))'

        # Note: everyone with access to this key can impersonate any user
        #       to a server using the same key.
        SERVER_PRIVATE_KEY: '247a1db50f8747f0e5e1f755c4390a598d36a4c7af202c2234b0613645d9c22a'

        # Other security related settings
        CSRF_COOKIE_HTTPONLY: true
        X_FRAME_OPTIONS: DENY

        DATABASES:
            default:
                ENGINE: django.db.backends.postgresql
                NAME: qabel-index
                USER: qabel-index

        # ### SMS gateway configuration
        #
        # Notable available backends (for reference see https://github.com/stefanfoulis/django-sendsms/ ):
        #
        # Plivo
        # SENDSMS_BACKEND: 'sendsms_backends.plivo.SmsBackend'
        # PLIVO_AUTH_ID: '...'
        # PLIVO_AUTH_TOKEN: '...'
        #
        # Plivo can optionally send message sending reports to an API. To do that, set these:
        # PLIVO_REPORT_URL: 'https://...'
        # PLIVO_REPORT_METHOD: 'GET' or 'POST' or ...
        # See https://www.plivo.com/docs/getting-started/sms-delivery-reports/ for details.
        #
        # Twilio
        # SENDSMS_BACKEND = 'sendsms.backends.twiliorest.SmsBackend'
        # SENDSMS_TWILIO_ACCOUNT_SID = '...'
        # SENDSMS_TWILIO_AUTH_TOKEN = '...'
        #
        # Locmem (like Django mail locmem backend, stores outgoing SMS in sendsms.outbox), the default
        # SENDSMS_BACKEND = 'sendsms.backends.locmem.SmsBackend'
        #
        # Filebased (like Django mail filebased, writes each SMS into a file in a directory)
        # SENDSMS_BACKEND = 'sendsms.backends.filebased.SmsBackend'
        # SMS_FILE_PATH = 'path/to/directory'

        # When sending real SMS, this has to be the phone number you got from your SMS gateway. You probably paid money for it.
        # This setting doesn't matter for the dummy backends.
        # Note that for successful delivery this is _required_. With an invalid value here delivery _will_ fail,
        # without producing any application log (because the SMS gateways have internal queues, a successful request
        # does not imply successful delivery). These failures will only show up through reporting hooks and dashboards.
        SENDSMS_DEFAULT_FROM_PHONE: '+15005550006'

        # Configure countries allowed for phone number registration. Check the applicable charges before
        # adding a country code.
        # https://en.wikipedia.org/wiki/List_of_country_calling_codes
        SMS_ALLOWED_COUNTRIES:
            - 49

        uwsgi:
            processes: 2
            http-socket: :9698
